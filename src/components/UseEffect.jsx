import { useEffect, useRef, useState, useContext } from "react";
import PaddedDiv from "./PaddedDiv";
import { sleep } from "../utils";
import { GlobalContext } from "../store/GlobalContext";

const COLORS = Object.freeze(["indigo", "purple"]);

const UseEffect = ({ setDeleted }) => {
    const [color, setColor] = useState(0);
    const [initialColor, setInitialColor] = useState("purple");
    const isInitialMount = useRef(true);
    const { background } = useContext(GlobalContext);

    useEffect(() => {
        sleep(3000).then(() => {
            setInitialColor(COLORS[0]);
        });
    }, []);

    useEffect(() => {
            sleep(500).then(() => {
                setColor(1 - color);
            });
    }, [color]);

    useEffect(() => {
        return () => {
            alert("This is an alert generated by the useEffect!");
        };
    }, []);

    return (
        <PaddedDiv title={"useEffect"}>
            <div className={`flex flex-col items-center gap-10 bg-${background}-200 p-10 rounded-lg shadow-inner`}>
                <div className="text-center text-xl font-light">
                    The useEffect hook is designed to manage side effects in React components. <br/>
                    When the Re-Render happens, it does not trigger this effect for other components. <br></br>
                    This facilitates custom re-renders based on specific triggers. <br/>
                    There are three primary types of effects that useEffect can handle:
                </div>

                <hr className="w-full border-gray-400" />

                <div className="text-center">
                    1. On update:<br/><br/>
                    This component changes color every half second:
                </div>

                <div className={`w-fit p-4 h-16 bg-${COLORS[color]}-600 text-white rounded-lg text-2xl font-medium`}>
                    Lorem Ipsum
                </div>

                <hr className="w-full border-gray-400" />


                <div className="text-center">
                    2. At load time:<br/><br/>
                     This component changes color once, 3 seconds after the app starts:
                </div>

                <div className={`bg-${initialColor}-600 p-4 rounded-lg text-2xl font-medium text-white`}>
                    Lorem Ipsum
                </div>

                <hr className="w-full border-gray-400" />

                <div className="text-center">
                    3. On unmount:<br/><br/>
                    This button removes the whole component:
                </div>

                <button
                    className="bg-red-600 hover:bg-red-400 text-white font-semibold py-3 px-8 rounded-lg transform transition-transform duration-300 hover:scale-110"
                    onClick={() => setDeleted(true)}
                >
                    Delete component!
                </button>
            </div>
        </PaddedDiv>
    );
};

export default UseEffect;